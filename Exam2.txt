
1.  Parallelize the following algorithms using parallel_for:

a.	Matrix multiplication 

matrix operator *(const matrix &x, const matrix &y)
{
	if (x.cols != y.rows)
	{
		throw std::invalid_argument("Invalid arguments");
	}

	matrix z;
	z.create(x.rows, y.cols);

	for (unsigned i = 0; i < x.rows; i++)
	{
		for (unsigned j = 0; j < y.cols; j++)
		{
			int zz = 0;
			for (unsigned k = 0; k < x.cols; k++)
			{
				zz += x(i, k) * y(k, j);
			}

			z(i, j) = zz;
		}
	}

	return z;
}

b.	Histogram calculations.  Assume values of x are between 0 and 255 (inclusive))

matrix histogram(const matrix &x)
{
	matrix h{256, 1};
	
	for (unsigned i = 0; i < x.rows; i++)
	{
		for (unsigned j = 0; j < y.cols; j++)
		{
			auto value = x(i, j);
			
			if (x < 0)
			{
				h(0, 0)++;
			}
			else if (x >= 255)
			{
				h(256, 0)++;
			}
			else 
			{
				h(value, 0)++;
			}
		}
	}
	
	return h;
}


2.	parallel_for uses the queue_work function instead of create_thread.
a.	Why?

b.	Give an example of when should you use create_thread instead of queue_work 
	to execute work asynchronously?

	
3.	Consider the following program:

int main()
{
	int value = 32;
	queue_work([&]
	{
		value -= 17;
		printf("%d\n", value);
	});
	return value;
}

a.  What is the result of this program?  (Hint: its not always the same).

b.  Correct the defect.


4.  Consider the following program:

// Image processing pipeline
concurrent_queue<matrix> pipeline;

future<matrix> blur_image_async(matrix x);

int main()
{
	// Start the pipeline.
	auto pipeline_thread = create_thread([]
	{
		for (;;)
		{
			auto x = pipeline.pop();
			auto h = histogram(x);
			
			// TODO: I have to do something with h, but what?
		}
	});


	auto x = load_image("image.png");
	auto y = blur_image_async(std::move(x)).get();

	// Never exits
	join(pipeline_thread);
	return 0;
}

a.	Implement blur_image_async using the pipeline.  
	Note: use the convolution algorithm from your homework to blur the image.
	Hint: You may need to modify what goes into the pipeline. 

b.	Modify the program to 
	1. Load the image (x) asynchronously with load_image_async
	2. and compute the histogram of y (see question 1) using a continuation. 

	
5a.	How does a semaphore differ from mutex?

5b. Describe the operation of a bar (sitting down, ordering a drink) in terms
	of a semaphore and mutex.

	

